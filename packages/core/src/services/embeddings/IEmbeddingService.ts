/**
 * Interface for embedding services that generate vector embeddings for text
 */
export interface IEmbeddingService {
  /**
   * Initialize the embedding service and load the model
   * This should be called before any other methods
   */
  initialize(): Promise<void>;
  
  /**
   * Generate an embedding vector for text content
   * @param text The text to generate an embedding for
   * @returns A numeric vector representation of the text
   */
  generateEmbedding(text: string): Promise<number[]>;
  
  /**
   * Generate embeddings for multiple texts in batch
   * @param texts Array of text strings to generate embeddings for
   * @returns Array of embedding vectors
   */
  generateEmbeddings(texts: string[]): Promise<number[][]>;
  
  /**
   * Get the dimension size of the embeddings generated by this service
   * @returns The dimension size
   */
  getDimension(): number;
  
  /**
   * Get the name of the embedding model being used
   * @returns The model name
   */
  getModelName(): string;
  
  /**
   * Check if the embedding service is initialized and ready
   * @returns True if ready, false otherwise
   */
  isReady(): boolean;
  
  /**
   * Release resources used by the embedding service
   * Call this when the service is no longer needed
   */
  dispose(): Promise<void>;
}
