#!/usr/bin/env node\n\n/**\n * Classification Quick Fix Script\n * \n * This script applies immediate fixes to resolve the classification issues\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\nfunction applyFixes() {\n  console.log('🔧 Applying Classification Fixes...');\n  console.log('====================================\\n');\n  \n  try {\n    // Check if TextBasedClassifier needs threshold adjustment\n    const textClassifierPath = path.join(__dirname, 'packages', 'core', 'src', 'services', 'TextBasedClassifier.ts');\n    if (fs.existsSync(textClassifierPath)) {\n      let content = fs.readFileSync(textClassifierPath, 'utf8');\n      \n      if (content.includes('confidenceThreshold = 0.6')) {\n        console.log('❌ TextBasedClassifier still has high threshold (0.6)');\n        console.log('   Manual fix required: Change default confidenceThreshold to 0.1');\n      } else if (content.includes('confidenceThreshold = 0.1')) {\n        console.log('✅ TextBasedClassifier threshold is correctly set to 0.1');\n      }\n    }\n    \n    // Check if ClassificationService needs threshold adjustment\n    const classificationServicePath = path.join(__dirname, 'packages', 'core', 'src', 'services', 'ClassificationService.ts');\n    if (fs.existsSync(classificationServicePath)) {\n      let content = fs.readFileSync(classificationServicePath, 'utf8');\n      \n      if (content.includes('confidenceThreshold: 0.6')) {\n        console.log('❌ ClassificationService still has high threshold (0.6)');\n        console.log('   Manual fix required: Change DEFAULT_OPTIONS.confidenceThreshold to 0.3');\n      } else if (content.includes('confidenceThreshold: 0.3')) {\n        console.log('✅ ClassificationService threshold is correctly set to 0.3');\n      }\n    }\n    \n    // Check if ElectronContentProcessor has content cleaning\n    const processorPath = path.join(__dirname, 'packages', 'desktop-app', 'src', 'main', 'adapters', 'ElectronContentProcessor.ts');\n    if (fs.existsSync(processorPath)) {\n      let content = fs.readFileSync(processorPath, 'utf8');\n      \n      if (content.includes('cleanTextForClassification')) {\n        console.log('✅ ElectronContentProcessor has content cleaning method');\n      } else {\n        console.log('❌ ElectronContentProcessor missing content cleaning method');\n        console.log('   Manual fix required: Add cleanTextForClassification method');\n      }\n      \n      if (content.includes('const cleanText = this.cleanTextForClassification(text)')) {\n        console.log('✅ ElectronContentProcessor uses cleaned text for classification');\n      } else {\n        console.log('❌ ElectronContentProcessor not using cleaned text');\n        console.log('   Manual fix required: Update classifyContent to use cleanTextForClassification');\n      }\n    }\n    \n    // Check taxonomy file\n    const taxonomyPath = path.join(__dirname, 'packages', 'desktop-app', 'resources', 'taxonomy', 'custom_knowledge_taxonomy.json');\n    if (fs.existsSync(taxonomyPath)) {\n      try {\n        const taxonomyContent = JSON.parse(fs.readFileSync(taxonomyPath, 'utf8'));\n        const concepts = taxonomyContent['@graph'].filter(item => item['@type'] === 'skos:Concept');\n        console.log(`✅ Taxonomy loaded successfully: ${concepts.length} concepts found`);\n        \n        // Check for technology-related concepts\n        const techConcepts = concepts.filter(c => \n          c['skos:prefLabel'].toLowerCase().includes('technology') ||\n          c['skos:prefLabel'].toLowerCase().includes('artificial') ||\n          c['skos:prefLabel'].toLowerCase().includes('computer')\n        );\n        console.log(`   Technology-related concepts: ${techConcepts.length}`);\n        \n      } catch (error) {\n        console.log('❌ Error parsing taxonomy file:', error.message);\n      }\n    } else {\n      console.log('❌ Taxonomy file not found at expected location');\n    }\n    \n    // Check model files\n    const modelsPath = path.join(__dirname, 'packages', 'desktop-app', 'resources', 'models', 'minilm');\n    if (fs.existsSync(modelsPath)) {\n      const modelFiles = fs.readdirSync(modelsPath);\n      const requiredFiles = ['model.onnx', 'vocab.txt', 'config.json'];\n      const missingFiles = requiredFiles.filter(file => !modelFiles.includes(file));\n      \n      if (missingFiles.length === 0) {\n        console.log('✅ All required model files are present');\n      } else {\n        console.log(`❌ Missing model files: ${missingFiles.join(', ')}`);\n      }\n    } else {\n      console.log('❌ Models directory not found');\n    }\n    \n    console.log('\\n📋 SUMMARY OF REQUIRED ACTIONS:');\n    console.log('================================');\n    console.log('1. ✅ Updated ClassificationDebugger with better logging');\n    console.log('2. 🔄 Update confidence thresholds (if not done):');\n    console.log('   - ClassificationService: confidenceThreshold: 0.3');\n    console.log('   - TextBasedClassifier: confidenceThreshold: 0.1');\n    console.log('3. 🔄 Add content cleaning to ElectronContentProcessor (if not done)');\n    console.log('4. 🔄 Rebuild the application after making changes');\n    console.log('5. 🧪 Test with the provided test samples');\n    \n    console.log('\\n🚀 NEXT STEPS:');\n    console.log('===============');\n    console.log('1. Rebuild the app: npm run build');\n    console.log('2. Restart the application');\n    console.log('3. Use the Classification Debugger with new logging');\n    console.log('4. Test with the sample content from classification-test-samples.js');\n    console.log('5. Check debug logs for \"[Classification Debug]\" messages');\n    \n  } catch (error) {\n    console.error('Error applying fixes:', error.message);\n  }\n}\n\n// Run the fix script\nif (require.main === module) {\n  applyFixes();\n}\n\nmodule.exports = { applyFixes };\n